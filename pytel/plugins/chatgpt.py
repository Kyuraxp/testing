# pytel < https://t.me/kastaid >
# Copyright (C) 2023-present kastaid
#
# This file is a part of < https://github.com/kastaid/pytel/ >
# Please read the GNU Affero General Public License in
# < https://github.com/kastaid/pytel/blob/main/LICENSE/ >

from os import remove
from . import (
    ChatGPT,
    RunningCommand,
    _try_purged,
    eor,
    get_text,
    plugins_helper,
    px,
    pytel,
    random_prefixies,
    suppress,)


@pytel.instruction(
    [
        "aitext",
        "aipics",
        "aitts",
        "aitranscribe",
        "aitranslator",
    ],
    outgoing=True,
)
async def _openai(client, message):
    if message.command[0] == "aitext":
        args = get_text(message)
        if not args:
            await eor(
                message,
                text="ask a question to use ChatGPT.",
            )
            return

        x = await eor(
            message,
            text="currently submitting a request...",
        )
        resp = ChatGPT.text(args)
        if resp:
            answer = f"<b>Question:</b> {args}\n\n<b>Answers:</b>\n{resp}"
            if len(answer) >= 4096:
                files = (
                    "cache/ChatGPT.txt"
                )
                with open(
                    files, "w+"
                ) as f:
                    f.write(answer)
                with suppress(
                    BaseException
                ):
                    await client.send_document(
                        message.chat.id,
                        document=files,
                        caption=f"<b>Question:</b> {args}",
                    )
                    remove(files)
            else:
                await client.send_message(
                    message.chat.id,
                    text=answer,
                    disable_notification=False,
                )
            await _try_purged(x, 1.5)
            return

    if message.command[0] == "aipics":
        args = get_text(message)
        if not args:
            await eor(
                message,
                text="provide an image category, to get images generated by ChatGPT.",
            )
            return

        x = await eor(
            message,
            text="currently submitting a request...",
        )
        resp = ChatGPT.images(args)
        if resp:
            try:
                cap = f"<b>Request:</b> {args.upper()}\n\nProjects by <a href='https://t.me/PYTELPremium/47'>PYTEL-Premium ðŸ‡®ðŸ‡©</a>\nMade with <a href='https://openai.com'>AI ChatGPT</a> ( DALL-E )"
                await client.send_photo(
                    message.chat.id,
                    photo=resp,
                    caption=cap,
                )
            except Exception:
                await client.send_message(
                    message.chat.id,
                    "ChatGPT not response!!",
                )
            await _try_purged(x, 1.5)
            return

    if message.command[0] == "aitts":
        args = get_text(message)
        if not args:
            await eor(
                message,
                text="send a text message or reply to a text message to make audio from ChatGPT.",
            )
            return

        x = await eor(
            message,
            text="currently submitting a request...",
        )
        resp = ChatGPT.tts(args)
        if resp:
            cap = f"<b>Original Text:</b> {args}\n\nProjects by <a href='https://t.me/PYTELPremium/47'>PYTEL-Premium ðŸ‡®ðŸ‡©</a>\nMade with <a href='https://openai.com'>AI ChatGPT</a> ( Open AI )"
            await client.send_audio(
                message.chat.id,
                audio=resp,
                caption=cap,
            )
        else:
            await client.send_message(
                message.chat.id,
                "ChatGPT not response!!",
            )
        await _try_purged(x, 1.5)
        return

    if (
        message.command[0]
        == "aitranscribe"
    ):
        repid = (
            message.reply_to_message.id
        )
        reaud = (
            message.reply_to_message.audio
            or message.reply_to_message.voice
        )
        if not reaud:
            await eor(
                message,
                text="reply to audio file or voice note to cast audio to text using ChatGPT.",
            )
            return
        x = await eor(
            message,
            text="Casting audio...",
        )
        if (
            message.reply_to_message.voice
        ):
            con = (
                message.reply_to_message.voice
            )
            con1 = await client.download_media(
                con, "cache/"
            )
            commands = "ffmpeg -y -i '{}' -vn -b:a 720k -c:a libmp3lame cache/{}_transcribe.mp3".format(
                con1,
                client.me.id,
            )
            RunningCommand(commands)
            fx = f"cache/{client.me.id}_transcribe.mp3"

        else:
            con = (
                message.reply_to_message.audio
            )
            fx = await client.download_media(
                con, "cache/"
            )

        if fx:
            resp = ChatGPT.audio_transmitting(
                fx,
                type_transmitting="transcribe",
            )
            if resp:
                try:
                    text = f"<b>Transcribe:</b> {resp}\n\nProjects by <a href='https://t.me/PYTELPremium/47'>PYTEL-Premium ðŸ‡®ðŸ‡©</a>\nMade with <a href='https://openai.com'>AI ChatGPT</a> ( OpenAI )"
                    await client.send_message(
                        message.chat.id,
                        text=text,
                        reply_to_message_id=repid,
                        disable_notification=False,
                        disable_web_page_preview=True,
                    )
                except Exception:
                    await client.send_message(
                        message.chat.id,
                        "ChatGPT not response!!",
                    )
                remove(fx)
                remove(con1)
                await _try_purged(
                    x, 1.5
                )
                return

    if (
        message.command[0]
        == "aitranslator"
    ):
        repid = (
            message.reply_to_message.id
        )
        reaud = (
            message.reply_to_message.audio
            or message.reply_to_message.voice
        )
        if not reaud:
            await eor(
                message,
                text="reply to audio file or voice note to translate audio to text using ChatGPT.",
            )
            return
        x = await eor(
            message,
            text="Translating audio...",
        )
        if (
            message.reply_to_message.voice
        ):
            con = (
                message.reply_to_message.voice
            )
            con1 = await client.download_media(
                con, "cache/"
            )
            commands = "ffmpeg -y -i '{}' -vn -b:a 720k -c:a libmp3lame cache/{}_translate.mp3".format(
                con1, client.me.id
            )
            RunningCommand(commands)
            fx = f"cache/{client.me.id}_translate.mp3"

        else:
            con = (
                message.reply_to_message.audio
            )
            fx = await client.download_media(
                con, "cache/"
            )

        if fx:
            resp = ChatGPT.audio_transmitting(
                fx,
                type_transmitting="translate",
            )
            if resp:
                try:
                    text = f"<b>Translator:</b> {resp}\n\nProjects by <a href='https://t.me/PYTELPremium/47'>PYTEL-Premium ðŸ‡®ðŸ‡©</a>\nMade with <a href='https://openai.com'>AI ChatGPT</a> ( Open AI )"
                    await client.send_message(
                        message.chat.id,
                        text=text,
                        reply_to_message_id=repid,
                        disable_notification=False,
                        disable_web_page_preview=True,
                    )
                except Exception:
                    await client.send_message(
                        message.chat.id,
                        "ChatGPT not response!!",
                    )
                remove(fx)
                remove(con1)
                await _try_purged(
                    x, 1.5
                )
                return


plugins_helper["chatgpt"] = {
    f"{random_prefixies(px)}aitext [text/reply]": "To get an answer from ChatGPT in the form of an Text.",
    f"{random_prefixies(px)}aipic [text/reply]": "To get an answer from ChatGPT in the form of an Image.",
    f"{random_prefixies(px)}aitts [text/reply]": "To get text to speech using ChatGPT.",
    f"{random_prefixies(px)}aitranscribe [reply audio/voice note]": "To transcribe audio to text using ChatGPT.",
    f"{random_prefixies(px)}aitranslator [reply audio/voice note]": "To transtalor audio to text using ChatGPT.",
}
